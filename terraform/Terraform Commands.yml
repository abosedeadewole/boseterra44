# Terrafrom Commands

# To initialize a directory
terraform init

# To check for errors in a terraform file
terraform fmt

# to validate a terraform file
terraform validate

# to give a speculative plan 
terraform plan

# to give apply 
terraform apply

# to auto-approve 
terraform apply -auto-approve

# using variables

method 1: using the -var option
-var="instance_type=t2.micro"

method 2: creating a variables file

variable "instance_type" 
{
  description = "Type of the EC2 instance"
  type        = string
  default     = "t2.micro"
}

#  make the state file macth the remote instances
terraform refresh

# to pull out the outputs of state file
terraform output 

# add in main.tf
output "public_ip_addr" 
{
  value = aws_instance.milua_server.public_ip  
}

# initilize a module first 

# to give a destroy mode  plan 
terraform plan -destroy 

# to destory the infrastructure
terraform destroy

# logining into the sever
ssh ec2-user@$(terraform output -raw public_ip_address) -i ~/.ssh/id_rsa

#
terraform apply -replace="aws_instance.<name of instance>"

# listing all the providers you using
terraform providers

#listing output in json format
terraform output -json

#
terraform apply -refresh-only

# ussing if_else condition
"Hello %{if var.hello == "world"}true%{else}false%{endif}"

# using for expression
[for w in var.worlds : upper(w)]

#using for expresssions to return object type results
{for i in var.worlds_map : i => upper(i) }

#
terraform state list

#
terraform state show aws_instance.s3_server[0]

# to change in state file
terraform state mv aws_instance.s3_sever[0] aws_instance.my_milua_sever

#
terraform state rm aws_s3_bucket.my_bucket milua25-kops.local

#
terraform apply -replace=aws_instance.my_sever[0]

#
terraform apply -refresh-only

#
terraform import aws_s3_bucket.my_bucket milua25-kops.local

# To get logs and set_path for a log
TF_LOG=TRACE TF_LOG_PATH=/home/kops/terraform/8-terraform-state/terraform.log terraform apply
# other options to log CORE, PROVIDER, 